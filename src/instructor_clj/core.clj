(ns instructor-clj.core
  (:require [cheshire.core :as cc]
            [org.httpkit.client :as http]
            [malli.core :as m]
            [malli.json-schema :as json-schema]
            [stencil.core :as sc])
  (:import [com.fasterxml.jackson.core JsonParseException]))


(defn schema->system-prompt
  "Convert a malli schema into JSON schema and generate a system prompt for responses"
  [schema]
  (sc/render-string
   "As a genius expert, your task is to understand the content and provide
    the parsed objects in json that match the following json_schema:
    \n\n
    {{schema}}
    \n\n
    Make sure to return an instance of only the JSON, not the schema itself and no text explaining the JSON"
   {:schema (json-schema/transform schema)}))


(defn call-llm-api
  "Makes a POST request to a specified LLM API endpoint with given headers and body."
  [api-url headers body]
  (try
    (-> (http/post api-url {:headers headers
                            :body body})
        deref ;; Dereference the future
        :body
        (cc/parse-string true))
    (catch JsonParseException _)))


(defn parse-generated-body
  "Parses the body of a response generated by an LLM API call.
   Extracts and converts the message content into a Clojure map."
  [body]
  (try
    (-> body
        :choices
        first
        :message
        :content
        (cc/parse-string true))
    (catch JsonParseException _)))


(defn llm->response
  "The function performs the LLM call and tries to destructure and get the actual response.
   Returns nil in cases where the LLM is not able to generate the expected response.

  @TODO Add ability to plugin different LLMs
  @TODO Getting response is brittle and not extensible for different LLMs"
  [{:keys [prompt response-schema api-key max-tokens model temperature]}]
  (let [api-url "https://api.openai.com/v1/chat/completions"
        headers {"Authorization" (str "Bearer " api-key)
                 "Content-Type" "application/json"}
        body (cc/generate-string {"model" model
                                  "messages"  [{"role" "system"
                                                "content" (schema->system-prompt response-schema)}
                                               {"role" "user"
                                                "content" prompt}]
                                  "temperature" temperature
                                  "max_tokens" max-tokens})
        body (call-llm-api api-url headers body)
        response (parse-generated-body body)]
    (when (m/validate response-schema response)
      response)))


(defn instruct
  "Attempts to obtain a valid response from the LLM based on the given prompt and schema,
   retrying up to `max-retries` times if necessary."
  [prompt response-schema & {:keys [api-key max-tokens model temperature max-retries]
                             :or {max-tokens 4096
                                  model "gpt-3.5-turbo"
                                  temperature 0.7
                                  max-retries 0}}]
  {:pre [(seq api-key)]}
  (loop [retries-left max-retries]
    (let [response (llm->response {:prompt prompt
                                   :response-schema response-schema
                                   :api-key api-key
                                   :max-tokens max-tokens
                                   :model model
                                   :temperature temperature})]
      (if (and (nil? response)
               (pos? retries-left))
        (recur (dec retries-left))
        response))))


;; Example usage
(comment

  (def api-key "<API-KEY>")
  ;; https://github.com/jxnl/instructor/blob/cea534fd2280371d2778e0f043d3fe557cc7bc7e/instructor/process_response.py#L245C17-L250C83

  (def User
    [:map
     [:name :string]
     [:age :int]])

  (instruct "John Doe is 30 years old."
            User
            :api-key api-key
            :max-retries 0)

  (def Meeting
    [:map
     [:action [:and {:description "What action is needed"}
               [:enum "call" "followup"]]]
     [:person [:and {:description "Person involved in the action"}
               [:string]]]
     [:time [:and {:description "Time of the day"}
             [:string]]]
     [:day [:and {:description "Day of the week"}
            [:string]]]])

  (= (instruct "Call Kapil on Saturday at 12pm"
               Meeting
               :api-key api-key
               :model "gpt-4"
               :max-retries 2)
     {:action "call", :person "Kapil", :time "12pm", :day "Saturday"}))
